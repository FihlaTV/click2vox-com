extends layout

block content
  link(href="/stylesheets/widget.css", rel="stylesheet")

  script.
    require(
      ['angular', 'angular-cookies', 'clipboard', 'jquery', 'bootstrap', 'jquery.qtip'],
      function(angular, ngCookies, Clipboard, $) {
        var jQuery = $;
        window.jQuery = jQuery;

        // Copy to Clipboard
        var clipboard = new Clipboard('#clipboard_copy');
        clipboard.on('success', function(e) {
          console.info('Action:', e.action);
          console.info('Text:', e.text);
          console.info('Trigger:', e.trigger);
          e.clearSelection();
        });

        clipboard.on('error', function(e) {
          console.error('Action:', e.action);
          console.error('Trigger:', e.trigger);
        });

        var app = angular.module('voxboneApp', ['ngCookies']);

        app.directive('qtip', function () {
          return {
            restrict: 'A',
            scope : {
                qtipVisible : '='
            },
            link: function(scope, element, attrs) {
              var my = attrs.qtipMy || 'center right'
                , at = attrs.qtipAt || 'center left'
                , qtipClass = attrs.qtipClass || 'qtip-bootstrap'
                , content = attrs.qtipContent || attrs.qtip
                ;

              if (attrs.qtipTitle) {
                content = {'title': attrs.qtipTitle, 'text': attrs.qtip};
              }

              $(element).qtip({
                content: content,
                position: {
                  my: my,
                  at: at,
                  target: element
                },
                hide: {
                  fixed : true,
                  delay : 100
                },
                style: qtipClass
              });

              if (attrs.qtipVisible) {
                scope.$watch('qtipVisible', function (newValue, oldValue) {
                  $(element).qtip('toggle', newValue);
                });
              }
            }
          }
        });

        app.directive('httpPrefix', function() {
          return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, element, attrs, controller) {
              function ensureHttpPrefix(value) {
                  // Need to add prefix if we don't have http:// prefix already AND we don't have part of it
                  if(value && !/^(https?):\/\//i.test(value)
                     && 'http://'.indexOf(value) !== 0 && 'https://'.indexOf(value) !== 0 ) {
                    controller.$setViewValue('http://' + value);
                    controller.$render();
                    return 'http://' + value;
                  }
                  else
                    return value;
                }
              controller.$formatters.push(ensureHttpPrefix);
              controller.$parsers.splice(0, 0, ensureHttpPrefix);
            }
          };
        });

        app.directive('autoFocus', function($timeout) {
          return {
            restrict: 'AC',
              link: function(_scope, _element) {
              $timeout(function(){
                _element[0].focus();
              }, 0);
            }
          };
        });

        app.controller('WidgetController', ['$scope', '$http', '$window', '$cookies', function($scope, $http, $window, $cookies){

          $scope.sipUriLinked = false;
          $scope.preview_webrtc_compatible = true;

          $scope.onClickTab = function (is_preview_webrtc_compatible) {
            $scope.preview_webrtc_compatible = is_preview_webrtc_compatible;
          };

          $scope.master = {
            showWidgetCode: false,
            dial_pad: true,
            button_style: 'style-a',
            background_style: 'dark',
            widget_code: 'Select from the SIP URI field the Echo Service (echo@ivrs), Digits Service (digits@ivrs), Voxbone IVR (timeivr@sip1@voxbone.com, or enter your SIP URI to Generate the code snippet',
            //- sip_uri: 'echo@ivrs',
            show_text_html_value: '<h3>This is a placeholder for your message or HTML</h3>',
            incompatible_browser_configuration: 'hide_widget'
          };

          $scope.eventHandlers = {
            'localMediaVolume': function (e) {
              //- console.log('Microphone Volume ->' + e.localVolume);
              if(voxbone.WebRTC.isMuted) return;

              $("#microphone em").removeClass();
              if (e.localVolume > 0.01) $("#mic1").addClass('on');
              if (e.localVolume > 0.05) $("#mic2").addClass('on');
              if (e.localVolume > 0.10) $("#mic3").addClass('on');
              if (e.localVolume > 0.20) $("#mic4").addClass('on');
              if (e.localVolume > 0.30) $("#mic5").addClass('peak');
            },
            'progress': function (e) {
              console.log('Calling...');
              $("#vw-title").text("Calling");
              $("#audio-ringback-tone").trigger('play');
            },
            'failed': function (e){
              console.log('Failed to connect: ' + e.cause);
              $("#audio-ringback-tone").trigger('pause');

              if (e.cause.trim().toLowerCase() != 'authentication error')
                $("#vw-title").text("Call Failed: " + e.cause.substr(0,11));
              else
                $("#vw-title").text("Call Failed: Token Expired");

              $("#vw-in-call").addClass('hidden');
              $(".vw-animated-dots").addClass('hidden');

              $("#vw-rating-after-message").removeClass('hidden');
            },
            'accepted': function (e){
              console.log('Call started');
              $("#audio-ringback-tone").trigger('pause');
              $("#vw-title").text("In Call");
              $(".vw-animated-dots").removeClass('hidden');
              $("#vw-unable-to-acces-mic").addClass('hidden');
            },
            'ended': function (e){
              console.log('Call ended');
              $("#audio-ringback-tone").trigger('pause');
              $("#vw-title").text("Call Ended");
              $(".vw-animated-dots").addClass('hidden');
              $("#vw-in-call").addClass('hidden');
              $("#vw-rating").removeClass('hidden');
              $(".vw-end-call").click();
            },
            'getUserMediaFailed': function (e){
              console.log('Cannot get User Media');
              $("#audio-ringback-tone").trigger('pause');
              $("#vw-title").text("Call Failed");
              $(".vw-animated-dots").addClass('hidden');
              $("#vw-in-call").addClass('hidden');
              $("#vw-unable-to-acces-mic").removeClass('hidden');
            },
            'getUserMediaAccepted': function(e) {
              console.log('local media accepted');
              $("#vw-title").text("Calling");
              $("#audio-ringback-tone").trigger('play');
              voxbone.Logger.loginfo("local media accepted");
            },
            'authExpired': function (e){
              console.log('Auth Expired!');
              $scope.getVoxrtcConfig(function(data) {
                voxbone.WebRTC.init(data);
              });
            }
          };

          $scope.prepareHtmlForCodepen = function(data){
            return data.replace(/"/g, "'");
          };

          $scope.reset = function(form){
            if(form){
              form.$setPristine();
              form.$setUntouched();
            }

            var cookie_data = $cookies.getObject('widget_data');
            if(cookie_data) {
              $scope.sipUriLinked = true;
              for (var attrname in cookie_data)
                $scope.master[attrname] = cookie_data[attrname];
              //- $scope.createMakeCallToolip();
            };

            $scope.widget = angular.copy($scope.master);
          };

          $scope.init = function () {
            voxbone.WebRTC.configuration.post_logs = true;
            voxbone.WebRTC.authServerURL = "https://webrtc.voxbone.com/rest/authentication/createToken";
            voxbone.WebRTC.customEventHandler = $scope.eventHandlers;
            $scope.getVoxrtcConfig(function(data) {
              voxbone.WebRTC.init(data)
            });
          };

          $scope.getVoxrtcConfig = function (callback) {
            $.get('/token_config', function(data){
              eval("var token_config = " + data);
              callback(token_config);
            });
          }

          $scope.isWebRTCSupported = function () {
            return voxbone.WebRTC.isWebRTCSupported();
          };

          $scope.showCallButton = function () {
            var ibc_value = $scope.widget.incompatible_browser_configuration;
            return $scope.preview_webrtc_compatible || (ibc_value == 'link_button_to_a_page');
          };

          $scope.getHiddenButtonText = function () {
            switch($scope.widget.incompatible_browser_configuration) {
              case 'hide_widget':
                return "";
                break;
              case 'show_text_html':
                return $scope.widget.show_text_html_value;
                break;
            };
          }

          $scope.isInCall = function () {
            return (typeof voxbone.WebRTC.rtcSession.isEstablished === "function") && !voxbone.WebRTC.rtcSession.isEnded();
          }

          $scope.makeCall = function () {
            if ($scope.isInCall())
              return;

            if(!$scope.preview_webrtc_compatible && ($scope.widget.incompatible_browser_configuration == 'link_button_to_a_page')) {
              $window.open($scope.widget.link_button_to_a_page_value,'_blank');
              return;
            }

            if($scope.isWebRTCSupported()){
              $("#vw-title").text("Waiting for User Media");
              $("#microphone em").removeClass('on').removeClass('off');
              $("#vw-unable-to-acces-mic").addClass('hidden');
              $(".vw-animated-dots").removeClass('hidden');
              $(".vox-widget-wrapper").removeClass('hidden');
              $("#vw-in-call").removeClass('hidden');
              $(".vw-rating").addClass('hidden');

              if($scope.widget.dial_pad)
                $("#dialpad").removeClass('hidden');
              else
                $("#dialpad").addClass('hidden');

              var caller_id = $scope.widget.caller_id ? $scope.widget.caller_id : "click2vox";
              voxbone.WebRTC.configuration.uri = (new JsSIP.URI(scheme="sip", user=(caller_id).replace(/[^a-zA-Z0-9-_]/g, ''), "voxbone.com")).toString();

              if($scope.widget.context)
                voxbone.WebRTC.context = $scope.widget.context;

              if($scope.widget.send_digits) {
                console.log('Digits to be send: ' + $scope.widget.send_digits);
                voxbone.WebRTC.configuration.dialer_string = $scope.widget.send_digits;
              }

              voxbone.WebRTC.call('#{did}');
              window.onbeforeunload = function(e){
                voxbone.WebRTC.unloadHandler();
              }
            }
          };

          $scope.reset();
          $scope.init();

          $scope.widget.setTheme = function (theme) {
            if ($scope.widget.button_style != theme) {
              $scope.widget.button_style = theme;
              if ($scope.sipUriLinked)
                $scope.widget.generateOutputCode();
            };
          };

          $scope.widget.generateOutputCode = function(){
            if (!$scope.sipUriLinked) return;
            console.log("--> Generating Widget Code...");

            var caller_id = $scope.widget.caller_id;
            if(caller_id)
              caller_id = caller_id.replace(/[^a-zA-Z0-9-_]/g, '')

            var data = {
              caller_id: caller_id,
              sip_uri: $scope.widget.sip_uri,
              button_label: $scope.widget.button_label,
              button_style: $scope.widget.button_style,
              background_style: $scope.widget.background_style,
              context: $scope.widget.context,
              dial_pad: $scope.widget.dial_pad,
              send_digits: $scope.widget.send_digits
            }

            var ibc = $scope.widget.incompatible_browser_configuration;
            if (ibc == 'hide_widget')
              data['hide_widget'] = true;
            else if (ibc == 'link_button_to_a_page')
              data['link_button_to_a_page'] = $scope.widget.link_button_to_a_page_value;
            else if (ibc == 'show_text_html')
              data['show_text_html'] =  $scope.widget.show_text_html_value;

            var req = {
              method: 'POST',
                url: '/voxbone_widget',
                headers: {
                  'Content-Type': 'application/json; charset=utf-8'
                },
                data: data
              };

              $http(req)
                .then(function successCallback(response){
                  //- console.log(response.data);
                  $('#generate-output-code')[0].text = "Regenerate Code";
                  $scope.widget.showWidgetCode = true;
                  $scope.widget.widget_code = response.data.widget_code;
                  $cookies.putObject('widget_data', $scope.widget);
                },
                function errorCallback(){
                  $scope.widget.showWidgetCode = false;
                  console.log("entered error callback");
                });
          };

          $scope.conditional_sip_provisioning = function(form) {
            if (!$scope.sipUriLinked)
              $scope.sip_provisioning(form);
          }

          $scope.sip_provisioning = function(form) {
            $scope.sipUriLinked = false;
            $scope.widget.showWidgetCode = false;
            $scope.widget.widget_code = 'Generating code snippet...';
            $scope.widget_form.sip_provisioning = true;
            $scope.widget_form.sip_provisioned = false;
            $scope.widget_form.cannot_validate_sip_uri = '';

            if (form.$valid) {
              var req = {
              method: 'POST',
              url: '/sip_provisioning',
              headers: {
                'Content-Type': 'application/json; charset=utf-8'
              },
              data: {
                sip_uri: $scope.widget.sip_uri
              }
            };

            $http(req)
              .then(function successCallback(response){
                //- console.log(response.data);
                //- console.log("Success!");
                $scope.widget.showWidgetCode = true;
                $scope.sipUriLinked = true;
                $scope.widget.generateOutputCode();
                $scope.widget_form.cannot_validate_sip_uri = '';
                $scope.widget_form.sip_provisioning = false;
                $scope.widget_form.sip_provisioned = true;
              }, function errorCallback(response){
                console.log("Error: ");
                console.log(response.data);
                $scope.widget.widget_code = 'Error generating widget code snippet. Please check it.';

                if(response.data && response.data.errors && response.data.errors.comeback_errors && response.data.errors.comeback_errors.apiErrorMessage)
                  $scope.widget_form.cannot_validate_sip_uri = response.data.errors.comeback_errors.apiErrorMessage;
                else
                  $scope.widget_form.cannot_validate_sip_uri = "Unexpected error linking your SIP URI. Please try again. ";

                $scope.widget_form.sip_provisioning = false;
                $scope.widget_form.sip_provisioned = false;
              });
            } else {
              $scope.widget_form.sip_provisioning = false;
              $scope.widget_form.sip_provisioned = false;
              $scope.widget_form.sip_uri.$error.pattern = true;
            }
          }
        }]);

        $(document).ready(function () {
          $('[data-toggle="tooltip"]').tooltip();

          $(".title-toggle").click(function() {
            $(this).parent().toggleClass("active");
          });

          $(".togle-bg a.dark").click(function() {
            $(".prev-view").removeClass("light").removeClass("grey").addClass("dark");
          });

          $(".togle-bg a.grey").click(function() {
            $(".prev-view").removeClass("light").removeClass("black").addClass("grey");
          });

          $(".togle-bg a.light").click(function() {
            $(".prev-view").removeClass("black").removeClass("grey").addClass("light");
          });

          $("#hangup_call").click(function(e) {
            e.preventDefault();
            voxbone.WebRTC.hangup();
          });

          $('.codebox-actions a').click(function(e) {
            e.preventDefault();
          });
        });

        angular.bootstrap(document, ['voxboneApp']);

        //- now we should load the widget.js script when all is ready
        require(['widget'], function () {});
    });

  .div#control

  .main.createButton
    .header
      .container
        .row
          .col-xs-12
            h1 Create a WebRTC Call Button
            p #[b Note:] this will create a code snippet for a click-to-call widget. The widget allows calls to be made from any webpage on browsers that support WebRTC. This snippet code can be embedded into any webpage or Content Management System that supports loading external JavaScript.
            p #[b Questions?] #[a(href="https://docs.google.com/document/d/1L6swwK_rVu_2XqSNMzmMRxBxL3YL50YTzkF6NaqeLqU/edit?usp=sharing" target="_blank") See our Frequently Asked Questions document.]
    .body(ng-controller="WidgetController")
      .container
        .row
          .col-md-6.left-col
            section
              span.title Button Configuration
              form
                .boxPanel
                  .form-group
                    label Button Label:
                    input.form-control(type="text", name="button_label", ng-model="widget.button_label" value="#{defaultBtnLabel}" placeholder="i.e. #{defaultBtnLabel}" ng-change='widget.generateOutputCode()')
                  .form-group
                    label Button Style:
                    button.btn-style-a(ng-click="widget.setTheme('style-a')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                    button.btn-style-b(ng-click="widget.setTheme('style-b')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
              span.title Call Configuration
              form#widget_form(name="widget_form", novalidate)
                .boxPanel
                  .form-group
                    label.control-label SIP URI
                      span.badge(data-toggle='tooltip' data-placement="right" title="This is the SIP address where inbound traffic from your Click2Vox button will be directed. Enter any valid SIP URI or use one of our diagnostic URIs – echo@ivrs or digits@ivrs") ?
                    input.form-control(required type="text" id="sip_uri" name="sip_uri" ng-model="widget.sip_uri" ng-pattern="/^[^@]+@[^@]+$/" ng-change='sip_provisioning(widget_form)' placeholder="i.e. echo@ivrs" auto-focus list="suggested-sips" ng-blur="conditional_sip_provisioning(widget_form)")
                    datalist#suggested-sips
                      option echo@ivrs
                      option digits@ivrs

                    div(style='color: green' ng-show="widget_form.sip_provisioning || widget_form.sip_provisioned")
                      div(ng-show="widget_form.sip_provisioning") Provisioning SIP URI...
                      div(ng-show="widget_form.sip_provisioned") SIP URI Provisioned!
                    .error-label(ng-show="widget_form.sip_uri.$touched" )
                      div(ng-show="widget_form.sip_uri.$error.required") SIP URI is required
                      div(ng-show="widget_form.sip_uri.$error.pattern") SIP URI must be valid
                      div(ng-show="widget_form.cannot_validate_sip_uri") {{ widget_form.cannot_validate_sip_uri || 'SIP URI cannot be validated. Please, try again'}}
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse",data-target="#collapseAdvancedCallConfiguration",href="#collapseAdvancedCallConfiguration") Advanced Call Configuration
                    .panel-collapse.collapse#collapseAdvancedCallConfiguration
                      .options-wrap.active
                        .form-group
                          label(for="btn-context") Caller ID
                            span.badge(data-toggle='tooltip' data-placement="right" title="Enter the Caller ID that you would like sent with your Click2Vox widget calls (Only valid URI characters will be sent)") ?
                          input.form-control(type="text" name="caller_id" ng-model="widget.caller_id" value="click2vox" placeholder="i.e. click2vox_demo" ng-change='widget.generateOutputCode()')
                        .form-group
                          label(for="btn-context") Context
                            span.badge(data-toggle='tooltip' data-placement="right" title="Send custom data to your SIP server using the X-Voxbone-Context header. Make sure to configure your SIP server to process this header.") ?
                          input.form-control(type="text" name="context" ng-model="widget.context" ng-change='widget.generateOutputCode()')
                        .form-group
                          label(for="btn-context")
                            input(type="checkbox" name="dial_pad" ng-model="widget.dial_pad" ng-change='widget.generateOutputCode()')
                            span DTMF Dial Pad
                            span.badge(data-toggle='tooltip' data-placement="right" title="Display a dialpad to allow your users to enter DTMF digits during a call.") ?
                        .form-group
                          label(for="btn-context") Send Digits #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" title="Automatically send DTMF digit(s) after a call is connected. This is useful for automatically navigating IVRs or entering access codes for a conference bridge. Digits should use the following format: <br><br>1,2,3,1200ms,4,5,900ms,6,#<br><br>This string will generate 1 2 3, wait 1200 milliseconds, enter 4, 5, wait 900 milliseconds then enter 6, #") ?]
                          input.form-control(type="text" name="send_digits" ng-model="widget.send_digits" ng-change='widget.generateOutputCode()')
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse" data-target="#collapseIncompatileBrowserConfiguration" href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                    .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                      .options-wrap.active
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model='widget.incompatible_browser_configuration' value="hide_widget")
                            span.radio-name Hide the widget
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, hide the widget") ?
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="link_button_to_a_page")
                            span.radio-name Link button to a page
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                            input.form-control(http-prefix type="url" name="link_button_to_a_page_value" ng-model="widget.link_button_to_a_page_value" ng-show="widget.incompatible_browser_configuration == 'link_button_to_a_page'" placeholder="i.e. https://mysite.com" ng-change='widget.generateOutputCode()')
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="show_text_html")
                            span.radio-name Show text/HTML
                            span.badge(data-toggle='tooltip' data-placement="right" title="Instead of showing the button, display the entered HTML ") ?
                            textarea.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="widget.incompatible_browser_configuration == 'show_text_html'" ng-model="widget.show_text_html_value" ng-change='widget.generateOutputCode()')

          .col-md-6.right-col
            .section
              span.title Widget Preview in a Browser:
              ul.nav.nav-tabs
                li(ng-click="onClickTab(true)" ng-class="{active:preview_webrtc_compatible}")
                  a(data-toggle="tab" href="#") WebRTC #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" data-width="350" title="This is how the widget will look like in a WebRTC compatible browser") ?]
                li(ng-click="onClickTab(false)" ng-class="{active:!preview_webrtc_compatible}")
                  a(data-toggle="tab" href="#") Non-WebRTC #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" data-width="350" title="This is how the widget will look like in a WebRTC incompatible browser") ?]

              .boxPanel.preview
                .prev-view.light
                  .not-supported#not-supported-message(ng-show="!showCallButton()" ng-bind-html="getHiddenButtonText()")
                  .togle-bg-tooltip
                    #[span.badge(data-toggle='tooltip' data-placement="left" data-html="true" data-width="350" title="You can click the button to make a call and test the service!<br>(once you setup your widget)") ?]
                  .widget-box#launch_call_div(ng-class="widget.button_style" ng-show="showCallButton()")
                    button.btn-style.launch_call#launch_call(ng-disabled="!widget.showWidgetCode" ng-click="makeCall()" qtip="You can click the button to make a call and test the service!<br>(once you setup your widget)" qtip-visible='true') #[span {{widget.button_label || 'Call Sales'}}]
                    .widget-footer-left
                      a(href="https://test.webrtc.org/" target="_blank") Test your setup
                    .widget-footer-right
                      a(href="https://voxbone.com" target="_blank") powered by:
                  .togle-bg
                    a.dark(href="javascript:void(0)" ng-click="widget.background_style = 'dark'")
                    a.grey(href="javascript:void(0)" ng-click="widget.background_style = 'grey'")
                    a.light(href="javascript:void(0)" ng-click="widget.background_style = 'light'")

                .prev-code
                  .title
                    span Widget Code Snippet
                      p Paste the following HTML code into your website or give it a try using on

                      .btn-code-playground
                        .btn-jsfiddle(ng-show="widget.showWidgetCode")
                          form#code_debug_jsfiddle(action="https://jsfiddle.net/api/post/library/pure/" method="POST" target="_blank")
                            input(type="hidden" name="html" value='{{ prepareHtmlForCodepen(widget.widget_code) }}')
                            a(href="#" onclick="$('#code_debug_jsfiddle').submit();") JSFiddle
                        .btn-jsfiddle(ng-show="widget.showWidgetCode")
                          form#code_debug_codepen(action="https://codepen.io/pen/define" method="POST" target="_blank")
                            input(type="hidden" name="data" value='{"html": "{{ prepareHtmlForCodepen(widget.widget_code) }}"}')
                            a(href="#" onclick="$('#code_debug_codepen').submit();") CodePen

                  .widget-code-wrap
                    .sample.shadow-z-2#widget_code
                      pre
                        {{ widget.widget_code }}
                    .codebox-actions(ng-show='widget.showWidgetCode')
                      a(id="clipboard_copy" href="#" data-clipboard-target="#widget_code") Copy to Clipboard
                      a(href="#" class="hidden" id="generate-output-code" ng-click='widget.generateOutputCode()') Generate Code
