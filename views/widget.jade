extends layout

block content
  link(href="/stylesheets/widget.css", rel="stylesheet")

  script.
    //Copy to Clipboard
    var clipboard = new Clipboard('#clipboard_copy');
    clipboard.on('success', function(e) {
      console.info('Action:', e.action);
      console.info('Text:', e.text);
      console.info('Trigger:', e.trigger);
      e.clearSelection();
    });

    clipboard.on('error', function(e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });

    var eventHandlers = {
      'localMediaVolume': function (e) {
        //- console.log('Microphone Volume ->' + e.localVolume);
        if(voxbone.WebRTC.isMuted) return;

        $("#microphone em").removeClass();
        if (e.localVolume > 0.01) $("#mic1").addClass('on');
        if (e.localVolume > 0.05) $("#mic2").addClass('on');
        if (e.localVolume > 0.10) $("#mic3").addClass('on');
        if (e.localVolume > 0.20) $("#mic4").addClass('on');
        if (e.localVolume > 0.30) $("#mic5").addClass('peak');
      },
      'progress': function (e) {
        console.log('Calling...');
        $("#vw-title").text("Calling");
      },
      'failed': function (e){
        console.log('Failed to connect: ' + e.data.cause);
        $("#vw-title").text("Call Failed");
      },
      'accepted': function (e){
        console.log('Call started');
        $("#vw-title").text("In Call");
        $(".vw-animated-dots").removeClass('hidden');
      },
      'ended': function (e){
        console.log('Call ended');
        $("#vw-title").text("Call Ended");
        $(".vw-animated-dots").addClass('hidden');
      }
    };

    var app = angular.module('voxboneApp', ['ngSanitize']);

    app.directive('httpPrefix', function() {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, controller) {
          function ensureHttpPrefix(value) {
              // Need to add prefix if we don't have http:// prefix already AND we don't have part of it
              if(value && !/^(https?):\/\//i.test(value)
                 && 'http://'.indexOf(value) !== 0 && 'https://'.indexOf(value) !== 0 ) {
                controller.$setViewValue('http://' + value);
                controller.$render();
                return 'http://' + value;
              }
              else
                return value;
            }
          controller.$formatters.push(ensureHttpPrefix);
          controller.$parsers.splice(0, 0, ensureHttpPrefix);
        }
      };
    });

    app.controller('WidgetController', ['$scope', '$http', '$window', function($scope, $http, $window){

      $scope.showWidgetCode = false;
      $scope.sipUriLinked = false;

      $scope.master = {
        dial_pad: true,
        button_style: 'style-b',
        background_style: 'dark',
        widget_code: 'Enter your SIP URI to Generate the code snippet',
        sip_uri: 'echo@ivrs',
        show_text_html_value: '<h3>This is a placeholder for your message</h3>'
      };

      $scope.prepareHtmlForCodepen = function(data){
        return data.replace(/"/g, "'");
      };

      $scope.reset = function(form){
        if(form){
          form.$setPristine();
          form.$setUntouched();
        }

        $scope.widget = angular.copy($scope.master);
      };

      $scope.init = function () {
        voxbone.WebRTC.authServerURL = "https://webrtc.voxbone.com/rest/authentication/createToken";
        voxbone.WebRTC.customEventHandler = eventHandlers;
        voxbone.WebRTC.init(#{voxrtc_config});
      };

      $scope.isWebRTCSupported = function () {
        return voxbone.WebRTC.isWebRTCSupported();
      };

      $scope.showCallButton = function () {
        var icb = $scope.widget.incompatible_browser_configuration;
        return (icb != 'hide_widget') && (icb != 'show_text_html');
      }

      $scope.getHiddenButtonText = function () {
        switch($scope.widget.incompatible_browser_configuration) {
          case 'hide_widget':
            return "";
            break;
          case 'show_text_html':
            return $scope.widget.show_text_html_value;
            break;
        };
      }

      $scope.makeCall = function () {
        if($scope.widget.incompatible_browser_configuration == 'link_button_to_a_page') {
          $window.open($scope.widget.link_button_to_a_page_value,'_blank');
          return;
        }

        if($scope.isWebRTCSupported()){
          $("#vw-title").text("Calling");
          $(".vw-animated-dots").removeClass('hidden');
          $(".vox-widget-wrapper").removeClass('hidden');
          $("#vw-in-call").removeClass('hidden');
          $("#vw-rating").addClass('hidden');

          if($scope.widget.dial_pad)
            $("#dialpad").removeClass('hidden');
          else
            $("#dialpad").addClass('hidden');

          var number = '#{did}';
          console.log('Calling ' + number);
          voxbone.WebRTC.call(number);
          window.onbeforeunload = function(e){
            voxbone.WebRTC.rtcSession.terminate();
          }
        }
      };

      $scope.reset();
      $scope.init();

      $scope.widget.setTheme = function (theme) {
        if (!$scope.sipUriLinked) return;
        if ($scope.widget.button_style != theme) {
          $scope.widget.button_style = theme;
          $scope.widget.generateOutputCode();
        };
      };

      $scope.widget.generateOutputCode = function(){
        if (!$scope.sipUriLinked) return;
        console.log("--> Generating Output Code...");

        var data = {
          caller_id: $scope.widget.caller_id,
          sip_uri: $scope.widget.sip_uri,
          button_label: $scope.widget.button_label,
          button_style: $scope.widget.button_style,
          background_style: $scope.widget.background_style,
          context: $scope.widget.context,
          dial_pad: $scope.widget.dial_pad,
          send_digits: $scope.widget.send_digits
        }

        var ibc = $scope.widget.incompatible_browser_configuration;
        if (ibc == 'hide_widget')
          data['hide_widget'] = true;
        else if (ibc == 'link_button_to_a_page')
          data['link_button_to_a_page'] = $scope.widget.link_button_to_a_page_value;
        else if (ibc == 'show_text_html')
          data['show_text_html'] =  $scope.widget.show_text_html_value;

        var req = {
          method: 'POST',
            url: '/voxbone_widget',
            headers: {
              'Content-Type': 'application/json; charset=utf-8'
            },
            data: data
          };

          $http(req)
            .then(function successCallback(response){
              //- console.log(response.data);
              $('#generate-output-code')[0].text = "Regenerate Code";
              $scope.showWidgetCode = true;
              $scope.widget.widget_code = response.data.widget_code;
            },
            function errorCallback(){
              $scope.showWidgetCode = false;
              console.log("entered error callback");
            });
      };

      $scope.sip_provisioning = function(form) {
        $scope.sipUriLinked = false;
        $scope.showWidgetCode = false;
        $scope.widget.widget_code = 'Generating code snippet...';
        $scope.widget_form.sip_provisioning = true;
        $scope.widget_form.sip_provisioned = false;
        $scope.widget_form.cannot_validate_sip_uri = '';

        if (form.$valid) {
          var req = {
          method: 'POST',
          url: '/sip_provisioning',
          headers: {
            'Content-Type': 'application/json; charset=utf-8'
          },
          data: {
            sip_uri: $scope.widget.sip_uri
          }
        };

        $http(req)
          .then(function successCallback(response){
            //- console.log(response.data);
            //- console.log("Success!");
            $scope.showWidgetCode = true;
            $scope.sipUriLinked = true;
            $scope.widget.generateOutputCode();
            $scope.widget_form.cannot_validate_sip_uri = '';
            $scope.widget_form.sip_provisioning = false;
            $scope.widget_form.sip_provisioned = true;
          }, function errorCallback(response){
            console.log("Error: ");
            console.log(response.data);
            $scope.widget.widget_code = 'Error generating widget code snippet. Please check it.';
            $scope.widget_form.cannot_validate_sip_uri = response.data.errors.comeback_errors.apiErrorMessage;
            $scope.widget_form.sip_provisioning = false;
            $scope.widget_form.sip_provisioned = false;
          });
        } else {
          $scope.widget_form.sip_provisioning = false;
          $scope.widget_form.sip_provisioned = false;
          $scope.widget_form.sip_uri.$error.pattern = true;
        }
      }
    }]);

    $(document).ready(function () {

      $('[data-toggle="tooltip"]').tooltip();

      $(".title-toggle").click(function() {
        $(this).parent().toggleClass("active");
      });

      $(".btn-style-a").click(function() {
        $(".widget-box").removeClass("style-b").addClass("style-a");
      });

      $(".btn-style-b").click(function() {
        $(".widget-box").removeClass("style-a").addClass("style-b");
      });

      $(".togle-bg a.dark").click(function() {
        $(".prev-view").removeClass("light").removeClass("grey").addClass("dark");
      });

      $(".togle-bg a.grey").click(function() {
        $(".prev-view").removeClass("light").removeClass("black").addClass("grey");
      });

      $(".togle-bg a.light").click(function() {
        $(".prev-view").removeClass("black").removeClass("grey").addClass("light");
      });

      $("#hangup_call").click(function(e) {
        e.preventDefault();
        voxbone.WebRTC.hangup();
      });

      $('.codebox-actions a').click(function(e) {
        e.preventDefault();
      });
    });
  .div#control

  .main.createButton
    .header
      .container
        .row
          .col-xs-12
            h1 Create a WebRTC Call Button
            p #[b Note:] this will create a code snippet for a click-to-call widget. The widget allows calls to be made without installing any software on browsers that support WebRTC. This snippet code can be embedded into any webpage or Content Management System that supports loading external JavaScript.
    .body(ng-controller="WidgetController")
      .container
        .row
          .col-sm-6.left-col
            section
              span.title Button Configuration
              form
                .boxPanel
                  .form-group
                    label Button Label:
                    input.form-control(type="text", name="button_label", ng-model="widget.button_label" value="Call Sales" placeholder="i.e. Call Sales" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                  .form-group
                    label Button Style:
                    button.btn-style-a(ng-click="widget.setTheme('style-a')") #[span {{ widget.button_label || 'Call Sales' }}]
                    button.btn-style-b(ng-click="widget.setTheme('style-b')") #[span {{ widget.button_label || 'Call Sales' }}]
              span.title Call Configuration
              form#widget_form(name="widget_form", novalidate)
                .boxPanel
                  .form-group
                    label.control-label SIP URI
                      span.badge(data-toggle='tooltip' data-placement="right" title="This is the SIP address where inbound traffic from your Click2Vox button will be directed. Enter any valid SIP URI or use one of our diagnostic URIs – echo@ivrs or digits@ivrs") ?
                    input.form-control(required type="text" id="sip_uri" name="sip_uri" ng-model="widget.sip_uri" ng-pattern="/^[^@]+@[^@]+$/" ng-blur="sip_provisioning(widget_form)" placeholder="i.e. echo@ivrs")
                    div(style='color: green' ng-show="widget_form.sip_provisioning || widget_form.sip_provisioned")
                      div(ng-show="widget_form.sip_provisioning") Provisioning SIP URI...
                      div(ng-show="widget_form.sip_provisioned") SIP URI Provisioned!
                    div(style='color: red' ng-show="widget_form.sip_uri.$touched" )
                      div(ng-show="widget_form.sip_uri.$error.required") SIP URI is required
                      div(ng-show="widget_form.sip_uri.$error.pattern") SIP URI must be valid
                      div(ng-show="widget_form.cannot_validate_sip_uri") {{ widget_form.cannot_validate_sip_uri || 'SIP URI cannot be validated. Please, try again'}}
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse",data-target="#collapseAdvancedCallConfiguration",href="#collapseAdvancedCallConfiguration") Advanced Call Configuration
                    .panel-collapse.collapse#collapseAdvancedCallConfiguration
                      .options-wrap.active
                        .form-group
                          label(for="btn-context") Caller ID
                            span.badge(data-toggle='tooltip' data-placement="right" title="Enter the Caller ID that you would like sent with your Click2Vox widget calls") ?
                          input.form-control(type="text" name="caller_id" ng-model="widget.caller_id" value="voxrtc_demo" placeholder="i.e. voxrtc_demo" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label(for="btn-context") Context
                            span.badge(data-toggle='tooltip' data-placement="right" title="Send custom data to your SIP server using the X-Voxbone-Context header. Make sure to configure your SIP server to process this header.") ?
                          input.form-control(type="text" name="context" ng-model="widget.context" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label(for="btn-context") DTMF Dial Pad
                            input(type="checkbox" name="dial_pad" ng-model="widget.dial_pad" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                            span.badge(data-toggle='tooltip' data-placement="right" title="Display a dialpad to allow your users to enter DTMF digits during a call.") ?
                        .form-group
                          label(for="btn-context") Send Digits #[span.badge(data-toggle='tooltip' data-placement="right" title="Automatically send DTMF digit(s) after a call is connected. This is useful for automatically navigating IVRs or entering access codes for a conference bridge. Digits should use the following format:'1,2,3,1200ms,4,5,900ms,6,#' - This string will generate 1 2 3, wait 1200 milliseconds, enter 4, 5, wait 900 milliseconds then enter 6, #") ?]
                          input.form-control(type="text" name="send_digits" ng-model="widget.send_digits" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse" data-target="#collapseIncompatileBrowserConfiguration" href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                    .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                      .options-wrap.active
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model='widget.incompatible_browser_configuration' value="hide_widget")
                            span.radio-name Hide the widget
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, hide the widget") ?
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="link_button_to_a_page")
                            span.radio-name Link button to a page
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                            input.form-control(http-prefix type="url" name="link_button_to_a_page_value" ng-model="widget.link_button_to_a_page_value" ng-show="widget.incompatible_browser_configuration == 'link_button_to_a_page'" placeholder="i.e. https://mysite.com" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="show_text_html")
                            span.radio-name Show text/HTML
                            span.badge(data-toggle='tooltip' data-placement="right" title="Instead of showing the button, display the entered HTML ") ?
                            textarea.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="widget.incompatible_browser_configuration == 'show_text_html'" ng-model="widget.show_text_html_value" ng-change='widget.generateOutputCode()' ng-model-options="{ updateOn: 'blur' }")

          .col-sm-6.right-col
            .section
              span.title Preview
              .boxPanel.preview
                .prev-view.light
                  .not-supported#not-supported-message(ng-show="!showCallButton()" ng-bind-html="getHiddenButtonText()")
                  .widget-box.style-b(ng-show="showCallButton()")
                    button.btn-style.mdi-communication-call#launch_call(ng-disabled="!showWidgetCode" ng-click="makeCall()") #[span {{widget.button_label || 'Call Sales'}}]
                    .widget-footer-left
                      a(href="https://test.webrtc.org/" target="_blank") Test your setup
                    .widget-footer-right
                      a(href="https://voxbone.com" target="_blank") powered by:
                  .togle-bg
                    a.dark(href="javascript:void(0)" ng-click="widget.background_style = 'dark'")
                    a.grey(href="javascript:void(0)" ng-click="widget.background_style = 'grey'")
                    a.light(href="javascript:void(0)" ng-click="widget.background_style = 'light'")

                .prev-code
                  .title
                    span Widget Code Snippet
                      p Paste the following HTML code into your website or give it a try using on

                      .btn-code-playground
                        .btn-jsfiddle
                          form#code_debug_jsfiddle(action="https://jsfiddle.net/api/post/library/pure/" method="POST" target="_blank")
                            input(type="hidden" name="html" value='{{ prepareHtmlForCodepen(widget.widget_code) }}')
                            a(href="#" onclick="$('#code_debug_jsfiddle').submit();") JSFiddle
                        .btn-jsfiddle
                          form#code_debug_codepen(action="https://codepen.io/pen/define" method="POST" target="_blank")
                            input(type="hidden" name="data" value='{"html": "{{ prepareHtmlForCodepen(widget.widget_code) }}"}')
                            a(href="#" onclick="$('#code_debug_codepen').submit();") CodePen

                  .widget-code-wrap
                    .sample.shadow-z-2#widget_code
                      pre.prettyprint.lang-html
                        code.prettyprint.lang-html
                          | {{ widget.widget_code }}
                    .codebox-actions(ng-show='showWidgetCode')
                      #[a(id="clipboard_copy" href="#" data-clipboard-target="#widget_code") Copy]
                      #[a(href="#" id="generate-output-code" ng-click='widget.generateOutputCode()') Generate Code]
  script(src="/javascripts/widget.js",type="application/javascript")

