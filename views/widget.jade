extends layout

block content
  link(href="/stylesheets/widget.css", rel="stylesheet")

  script.
    //Copy to Clipboard
    var clipboard = new Clipboard('#clipboard_copy');
    clipboard.on('success', function(e) {
      console.info('Action:', e.action);
      console.info('Text:', e.text);
      console.info('Trigger:', e.trigger);
      e.clearSelection();
    });

    clipboard.on('error', function(e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });

    var eventHandlers = {
      'localMediaVolume': function (e) {
        //- console.log('Microphone Volume ->' + e.localVolume);
        if(voxbone.WebRTC.isMuted) return;

        $("#microphone em").removeClass();
        if (e.localVolume > 0.01) $("#mic1").addClass('on');
        if (e.localVolume > 0.05) $("#mic2").addClass('on');
        if (e.localVolume > 0.10) $("#mic3").addClass('on');
        if (e.localVolume > 0.20) $("#mic4").addClass('on');
        if (e.localVolume > 0.30) $("#mic5").addClass('peak');
      },
      'progress': function (e) {
        console.log('Calling ' + number);
      },
      'failed': function (e){
        console.log('Failed to connect: ' + e.data.cause);
      },
      'accepted': function (e){
        console.log('Call started');
      },
      'ended': function (e){
        console.log('Call ended');
      }
    };

    var app = angular.module('voxboneApp', []);

    app.directive('httpPrefix', function() {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, controller) {
          function ensureHttpPrefix(value) {
              // Need to add prefix if we don't have http:// prefix already AND we don't have part of it
              if(value && !/^(https?):\/\//i.test(value)
                 && 'http://'.indexOf(value) !== 0 && 'https://'.indexOf(value) !== 0 ) {
                controller.$setViewValue('http://' + value);
                controller.$render();
                return 'http://' + value;
              }
              else
                return value;
            }
          controller.$formatters.push(ensureHttpPrefix);
          controller.$parsers.splice(0, 0, ensureHttpPrefix);
        }
      };
    });

    app.controller('WidgetController', ['$scope', '$http', '$window', function($scope, $http, $window){

        $scope.master = {
          dial_pad: true,
          button_style: 'style-b',
          background_style: 'dark',
          widget_code: 'Click on Regenerate Code!'
        };

        $scope.prepareHtmlForCodepen = function(data){
          return data.replace(/"/g, "'");
        };

        $scope.reset = function(form){
          if(form){
            form.$setPristine();
            form.$setUntouched();
          }

          $scope.widget = angular.copy($scope.master);
        };

        $scope.init = function () {
          voxbone.WebRTC.authServerURL = "https://webrtc.voxbone.com/rest/authentication/createToken";
          voxbone.WebRTC.customEventHandler = eventHandlers;
          voxbone.WebRTC.init(#{voxrtc_config});
        };

        $scope.makeCall = function () {
          var supported = voxbone.WebRTC.isWebRTCSupported();

          if(supported == false){
            console.log("WebRTC is NOT supported!");

            if($scope.widget.hide_widget) return;
            else if($scope.widget.link_button_to_a_page_value)
              $window.open($scope.widget.link_button_to_a_page_value,'_blank')
            else if($scope.widget.show_text_html_value) {
              $(".vox-widget-wrapper .vw-body").addClass('hidden');
              $(".vox-widget-wrapper #full-screen").addClass('hidden');
              $(".vox-widget-wrapper #vw-message").removeClass('hidden');
              $(".vox-widget-wrapper #vw-message")[0].innerHTML = $scope.widget.show_text_html_value;
              $(".vox-widget-wrapper").removeClass('hidden');
            }
          } else{
            $(".vox-widget-wrapper").removeClass('hidden');
            var number = '13072787231'; //16092975366
            voxbone.WebRTC.call(number);
            window.onbeforeunload = function(e){
              voxbone.WebRTC.rtcSession.terminate();
            }
          }
        };

        $scope.reset();
        $scope.init();

        $scope.widget.generateOutputCode = function(){
          console.log("--> Generating Output Code...");
          var req = {
            method: 'POST',
            url: '/voxbone_widget',
            headers: {
              'Content-Type': 'application/json; charset=utf-8'
            },
            data: {
              caller_id: $scope.widget.caller_id,
              sip_uri: $scope.widget.sip_uri,
              button_label: $scope.widget.button_label,
              button_style: $scope.widget.button_style,
              background_style: $scope.widget.background_style,
              context: $scope.widget.context,
              dial_pad: $scope.widget.dial_pad,
              send_digits: $scope.widget.send_digits,
              hide_widget: $scope.widget.hide_widget,
              link_button_to_a_page: $scope.widget.link_button_to_a_page_value,
              show_text_html: $scope.widget.show_text_html_value
            }
          };

          $http(req)
            .then(function successCallback(response){
              //- console.log(response.data);
              $scope.widget.widget_code = response.data.widget_code;

            }, function errorCallback(){
              console.log("entered error callback");
            });
        }
    }]);

    $(document).ready(function () {
      $(".title-toggle").click(function() {
        $(this).parent().toggleClass("active");
      });

      $(".btn-style-a").click(function() {
        $(".widget-box").removeClass("style-b").addClass("style-a");
      });

      $(".btn-style-b").click(function() {
        $(".widget-box").removeClass("style-a").addClass("style-b");
      });

      $(".togle-bg a.dark").click(function() {
        $(".prev-view").removeClass("light").removeClass("grey").addClass("dark");
      });

      $(".togle-bg a.grey").click(function() {
        $(".prev-view").removeClass("light").removeClass("black").addClass("grey");
      });

      $(".togle-bg a.light").click(function() {
        $(".prev-view").removeClass("black").removeClass("grey").addClass("light");
      });

      $("#hangup_call").click(function(e) {
        e.preventDefault();
        voxbone.WebRTC.hangup();
      });

      $('.codebox-actions a').click(function(e) {
        e.preventDefault();
      });
    });
  .div#control

  .main.createButton
    .header
      .container
        .row
          .col-xs-12
            h1 Create a WebRTC Call Button
            p #[b Note:] this will create a code widget that can be embedded into any page that allows for JS code and will allow customers to video call without installing any software.
    .body(ng-controller="WidgetController")
      .container
        .row
          .col-sm-6.left-col
            section
              span.title Button Configuration
              form
                .boxPanel
                  .form-group
                    label Button Label:
                    input.form-control(type="text", name="button_label", ng-model="widget.button_label" value="Call Sales" placeholder="i.e. Call Sales")
                  .form-group
                    label Button Style:
                    button.btn-style-a(ng-click="widget.button_style = 'style-a'") #[span {{ widget.button_label || 'Call Sales' }}]
                    button.btn-style-b(ng-click="widget.button_style = 'style-b'") #[span {{ widget.button_label || 'Call Sales' }}]
              span.title Call Configuration
              form
                .boxPanel
                  .form-group
                    label.control-label SIP URI #[span.badge ?]
                    input.form-control(required type="email", name="sip_uri", ng-model="widget.sip_uri" data-value="SIP: echotest@voxout.voxbone.com" placeholder="i.e. SIP: echo@ivrs")
                    div(ng-show="widget.sip_uri.$error.required") SIP URI is required
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse",data-target="#collapseAdvancedCallConfiguration",href="#collapseAdvancedCallConfiguration") Advanced Call Configuration
                    .panel-collapse.collapse#collapseAdvancedCallConfiguration
                      .options-wrap.active
                        .form-group
                          label(for="btn-context") Caller ID #[span.badge ?]
                          input.form-control(type="text" name="caller_id" ng-model="widget.caller_id" value="voxrtc_demo" placeholder="i.e. voxrtc_demo")
                        .form-group
                          label(for="btn-context") Context #[span.badge ?]
                          input.form-control(type="text" name="context" ng-model="widget.context")
                        .form-group
                          label(for="btn-context") DTMF Dial Pad #[span.badge ?]
                          input(type="checkbox" name="dial_pad" ng-model="widget.dial_pad")
                        .form-group
                          label(for="btn-context") Send Digits #[span.badge ?]
                          input.form-control(type="text" name="send_digits" ng-model="widget.send_digits")
                  .panel.panel-default
                    .panel-heading
                      a.collapsed.title-toggle(data-toggle="collapse",data-target="#collapseIncompatileBrowserConfiguration",href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                    .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                      .options-wrap.active
                        .form-group
                          label.control-label Hide the widget #[span.badge ?]
                          input.form-control(type='checkbox' name='hide_widget' ng-model='widget.hide_widget')
                        .form-group
                          label.control-label Link button to a page #[span.badge ?]
                          input.form-control(type='checkbox' name='link_button_to_a_page', ng-model="widget.link_button_to_a_page")
                          input.form-control(http-prefix type="url" name="link_button_to_a_page_value"
                          ng-model="widget.link_button_to_a_page_value" ng-show="widget.link_button_to_a_page")
                        .form-group
                          label.control-label Show text/HTML #[span.badge ?]
                          input.form-control(type='checkbox' name='show_text_html', ng-model="widget.show_text_html")
                          input.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="widget.show_text_html" ng-model="widget.show_text_html_value")

          .col-sm-6.right-col
            .section
              span.title Preview
              .boxPanel.preview
                .prev-view.light
                  .widget-box.style-b
                    button.btn-style.mdi-communication-call#launch_call(ng-click="makeCall()") #[span {{widget.button_label || 'Call Sales'}}]
                    .widget-footer-left
                      a(href="https://test.webrtc.org/" target="_blank") Test your setup
                    .widget-footer-right
                      a(href="https://voxbone.com" target="_blank") powered by:
                  .togle-bg
                    a.dark(href="javascript:void(0)" ng-click="widget.background_style = 'dark'")
                    a.grey(href="javascript:void(0)" ng-click="widget.background_style = 'grey'")
                    a.light(href="javascript:void(0)" ng-click="widget.background_style = 'light'")

                .prev-code
                  .title
                    span Code Widget
                      p Paste the following HTML code into your website or give it a try using on

                      .btn-code-playground
                        .btn-jsfiddle
                          form#code_debug_jsfiddle(action="https://jsfiddle.net/api/post/library/pure/" method="POST" target="_blank")
                            input(type="hidden" name="html" value='{{ prepareHtmlForCodepen(widget.widget_code) }}')
                            a(href="#" onclick="$('#code_debug_jsfiddle').submit();") JSFiddle
                        .btn-jsfiddle
                          form#code_debug_codepen(action="https://codepen.io/pen/define" method="POST" target="_blank")
                            input(type="hidden" name="data" value='{"html": "{{ prepareHtmlForCodepen(widget.widget_code) }}"}')
                            a(href="#" onclick="$('#code_debug_codepen').submit();") CodePen

                  .widget-code-wrap
                    .sample.shadow-z-2.prettyprint#widget_code
                      | {{ widget.widget_code }}
                    .codebox-actions
                      #[a(id="clipboard_copy" href="#" data-clipboard-target="#widget_code") Copy]
                      #[a(href="#", id="generate-output-code", ng-click='widget.generateOutputCode()') Regenerate Code]
  script(src="/javascripts/widget.js",type="application/javascript")

