extends ../layout

block extra_head
  link(href="/stylesheets/vxb-widget.css" rel="stylesheet")
  link(href="/lib/angular-bootstrap-colorpicker/css/colorpicker.min.css" rel="stylesheet")
  script.
    require([
      'angular',
      'angular-sanitize',
      'angular-bootstrap-colorpicker',
      'jquery',
      'controllers/widget.add',
      'directives/qtip',
      'directives/http.prefix',
      'directives/check.allowed.sip'
    ],
    function(
      angular, ngSanitize, colorPicker, $,
      WidgetAddController, qtipDirective,
      httpPrefixDirective, checkAllowedSip) {

        angular.module('voxboneApp', ['ngSanitize','colorpicker.module'])
          .directive('qtip', qtipDirective)
          .directive('httpPrefix', httpPrefixDirective)
          .directive('checkAllowedSip', checkAllowedSip)
          .controller('WidgetAddController', WidgetAddController);

        angular.bootstrap(document, ['voxboneApp']);
    });

block content
  .site-wrapper-inner.home-wrap
    .container
      .div#control

      .main.createButton.panel-content.button-page(class=showWizard ? 'wizard' : '' ng-controller="WidgetAddController" ng-init=`widget.sip_uri='${addedSip}'`)
        .panel-header
          h1.panel-title Create a WebRTC Click-to-Call Button
          p #[b Questions?] #[a(href="https://click2vox.com/faq" target="_blank") See our Frequently Asked Questions document.]

          #alert-success.alert.alert-warning.ng-cloak(ng-show="!isWebRTCSupported()") #[i.glyphicon.glyphicon-exclamation-sign] You are using a browser that does not support WebRTC. You can configure and preview your buttons, but you will not be able to place test calls. Please use Chrome or Firefox for maximum functionality.
          #alert-success.alert.alert-success(style="display: none;")

        if currentUser.showWizard()
            .sip-steps.centered-steps
              .step
                span Add a SIP Address
              .step.right.active
                span Create a Click-to-Call Button
        hr
        .panel-body(ng-class="{newButton: !isWebRTCSupported()}")
          .row
            .col-sm-12.col-lg-6
              form#widget_form(name="widget_form", novalidate)
                .form-group
                  label Configuration Name
                  input.form-control(type="text", name="configuration_name", ng-model="widget.configuration_name" placeholder="i.e. Sales Button")
                .form-header Button Configuration
                .form-group
                  label Button Label
                  input.form-control(type="text", name="button_label", ng-model="widget.button_label" value=`${defaultBtnLabel}` placeholder=`i.e. ${defaultBtnLabel}`)
                .form-group
                  label Button Style
                  .buttons
                    .button-text
                      button.btn-style-a(ng-cloak ng-click="setTheme('style-a')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Blue Theme
                    .button-text
                      button.btn-style-b(ng-cloak ng-click="setTheme('style-b')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Purple Theme
                    .button-text
                      button.btn-style-c(ng-cloak ng-click="setCustomTheme()" colorpicker colorpicker-position="right" colorpicker-with-input="true" type="text" ng-model="widget.button_color" ng-style="{'background': widget.button_color ? widget.button_color : tempButtonColor }") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Custom Theme

                .panel.panel-default
                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse", data-target="#styleConfiguration", href="#styleConfiguration") Style Configuration
                  .panel-collapse.collapse#styleConfiguration
                    .options-wrap.active
                      .form-group
                        div(style="display:inline-block;")
                          input(type='checkbox' name='show_frame' ng-model='widget.show_frame')
                          span.radio-name Show frame
                          span.badge(data-toggle='tooltip' data-placement="right" title="Shows/Hides the background and border of the button") ?
                        div(style="display:inline-block;")
                          span(style="margin-left:20px" ng-show='widget.show_frame') Pick frame color #[i.fa.fa-tint(aria-hidden='true' colorpicker colorpicker-position="right" colorpicker-with-input="true" type="text" ng-model="widget.frame_color" style="cursor: pointer" ng-style="{'color': widget.frame_color || 'black'}")]

                      .form-group
                        label
                          input(type='checkbox' name='test_setup' ng-model='widget.test_setup')
                          span.radio-name Test user setup
                          span.badge(data-toggle='tooltip' data-placement="right" title="Place a link to test the users's WebRTC setup") ?

                      .form-group
                        label
                          input(type='checkbox' name='show_branding' ng-model='widget.show_branding')
                          span.radio-name Show branding
                          span.badge(data-toggle='tooltip' data-placement="right" title="Toggles Voxbone branding from button and popup") ?

                      .form-group
                        a.style-guide(href='https://developers.voxbone.com/how-to/style-click2vox-widget/' target='_blank') Click here for information about Custom CSS

                .form-header Call Configuration
                .form-group
                  label.control-label SIP URI
                    span.badge(data-toggle='tooltip' data-placement="right" title="This is the SIP address where inbound traffic from your Click2Vox button will be directed. Select one of yours SIP URIs or use one of our diagnostic URIs â€“ echo@ivrs or digits@ivrs") ?

                  select.form-control(
                    ng-model="widget.sip_uri" name="sip_uri" required
                    ng-options=`sip for sip in ${JSON.stringify(currentUser.getSipURIsWithNewSipUri())}`)
                    option(value="") Select a SIP URI

                  .error-label(ng-cloak ng-show="widget_form.sip_uri.$touched")
                    div(ng-show="widget_form.sip_uri.$error.required") SIP URI required

                .form-group(ng-cloak ng-show="widget.sip_uri == 'Add a new SIP URI'")
                  if !currentUser.sipsLimitReached()
                    label.control-label Enter a new SIP URI
                    input.form-control(type="text" name="new_sip_uri" ng-model="widget.new_sip_uri" ng-pattern="/^[^@]+@[^@]+$/" placeholder="i.e. echo@ivrs" check-allowed-sip)

                    .error-label
                      div(ng-show="widget_form.new_sip_uri.$error.notallowed") SIP URI not allowed
                      div(ng-show="widget_form.new_sip_uri.$error.required") SIP URI is required
                      div(ng-show="widget_form.new_sip_uri.$error.pattern") SIP URI must be valid i.e: user@ivrs.voxbone.com
                  else
                    include ../account/contact-voxbone-modal

                .panel.panel-default
                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse", data-target="#collapseAdvancedCallConfiguration", href="#collapseAdvancedCallConfiguration") Advanced Call Configuration
                  .panel-collapse.collapse#collapseAdvancedCallConfiguration
                    .options-wrap.active
                      .form-group
                        label(for="btn-context") Caller ID
                          span.badge(data-toggle='tooltip' data-placement="right" title="Enter the Caller ID that you would like sent with your Click2Vox widget calls (Only valid URI characters will be sent)") ?
                        input.form-control(type="text" name="caller_id" ng-model="widget.caller_id" value="click2vox" placeholder="i.e. click2vox_demo")
                      .form-group
                        label(for="btn-context") Context
                          span.badge(data-toggle='tooltip' data-placement="right" title="Send custom data to your SIP server using the X-Voxbone-Context header. Make sure to configure your SIP server to process this header.") ?
                        input.form-control(type="text" name="context" ng-model="widget.context")
                      .form-group
                        label(for="btn-context")
                          input(type="checkbox" name="dial_pad" ng-model="widget.dial_pad")
                          span DTMF Dial Pad
                          span.badge(data-toggle='tooltip' data-placement="right" title="Display a dialpad to allow your users to enter DTMF digits during a call.") ?
                      .form-group
                        label(for="btn-context") Send Digits #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" title="Automatically send DTMF digit(s) after a call is connected. This is useful for automatically navigating IVRs or entering access codes for a conference bridge. Digits should use the following format: <br><br>1,2,3,1200ms,4,5,900ms,6,#<br><br>This string will generate 1 2 3, wait 1200 milliseconds, enter 4, 5, wait 900 milliseconds then enter 6, #") ?]
                        input.form-control(type="text" name="send_digits" ng-model="widget.send_digits" placeholder="i.e. 1,2,3,1200ms,4,5,900ms,6,#")
                      .form-group
                        label(for="btn-context")
                          input(type="checkbox" name="rating" ng-model="widget.rating")
                          span &nbsp;Ask for rating after the call ends
                          span.badge(data-toggle='tooltip' data-placement="right" title="Ask the user/caller to rate after the call ends") ?
                      .form-group
                        label(for="btn-context")
                          input(type="checkbox" name="ringback" ng-model="widget.ringback")
                          span &nbsp;Ringback tone
                          span.badge(data-toggle='tooltip' data-placement="right" title="Hear a ring while the call connects") ?
                .panel.panel-default
                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse" data-target="#collapseIncompatileBrowserConfiguration" href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                  .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                    .options-wrap.active.incompatible
                      .form-group
                        label.hide_widget
                          input(type='radio' name='incompatible_browser_configuration' ng-model='widget.incompatible_browser_configuration' value="hide_widget")
                          span.radio-name Hide the widget
                          span.badge(data-toggle='tooltip' data-placement="right" title="If the visitorâ€™s browser does not support WebRTC, hide the widget") ?
                      .form-group
                        label.link_button_to_a_page
                          input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="link_button_to_a_page")
                          span.radio-name Link button to a page
                          span.badge(data-toggle='tooltip' data-placement="right" title="If the visitorâ€™s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                          input.form-control(http-prefix type="url" name="link_button_to_a_page_value" ng-model="widget.link_button_to_a_page_value" ng-show="widget.incompatible_browser_configuration == 'link_button_to_a_page'" placeholder="i.e. https://mysite.com")
                      .form-group
                        label.show_text_html
                          input(type='radio' name='incompatible_browser_configuration' ng-model="widget.incompatible_browser_configuration" value="show_text_html")
                          span.radio-name Show text/HTML
                          span.badge(data-toggle='tooltip' data-placement="right" title="Instead of showing the button, display the entered HTML ") ?
                          textarea.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="widget.incompatible_browser_configuration == 'show_text_html'" ng-model="widget.show_text_html_value")
            .col-sm-12.col-lg-6

              include preview_widget

              div(ng-cloak)
                .error-label(ng-show="savingError")
                  div(ng-bind="savingError")

                .pull-right
                  button.btn.btn-primary.btn-xs(style='margin-right: 5px;' ng-cloak ng-click='discardConfiguration(widget_form)' ng-disabled="savingConfig || !widget_form.$dirty") Discard Changes
                  button#saveConfig.btn.btn-primary.btn-lg(ng-cloak ng-click='saveConfiguration()' ng-disabled="widget_form.$invalid || savingConfig || widget_form.$pristine || sipDirty") {{submitText}}
